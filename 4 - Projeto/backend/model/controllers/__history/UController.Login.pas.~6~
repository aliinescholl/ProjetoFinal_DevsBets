unit UController.Login;

interface

uses
  Horse,
  JOSE.Core.JWT,
  JOSE.CORE.Builder,
  GBSWAGGER.Path.Attributes,
  UController.Base,
  UEntity.Logins;

type
  [SwagPath('login', 'Login')]
  TControllerLogin = class(TControllerBase)
    private
    public
    [SwagPOST('Autenticação do Usuário')]
    [SwagParamBody('Informações do Login', TLogin)]
    [SwagResponse(200, 'Token (String)')]
    [SwagResponse(400)]
    class procedure PostLogin(Req: THorseRequest; Res: THorseResponse; Next: TProc);
  end;

implementation

uses
  System.JSON,
  System.SysUtils;

{ TControllerLogin }

class procedure TControllerLogin.PostLogin(Req: THorseRequest;
  Res: THorseResponse; Next: TProc);
var
  xToken: TJWT;
  xCompactToken,
  xUser,
  xPassword: String;
  xJSONLogin: TJSONObject;
begin
  xToken := TJWT.Create;
  try
    with xToken.Claims do
    begin
      Issuer     := 'DevsBets';
      Subject    := 'Projeto Final';
      Expiration := Now + 1;

      xJSONLogin := Req.Body<TJSONObject>;

      if not Assigned(xJSONLogin) then
      begin
        Res.Status(THTTPStatus.BadRequest);
        Exit;
      end;

      if not xJSONLogin.TryGetValue<String>('login', xUser) then
      begin
        Res.Status(THTTPStatus.BadRequest);
        Exit;
      end;

      if not xJSONLogin.TryGetValue<String>('password', xPassword) then
      begin
        Res.Status(THTTPStatus.BadRequest);
        Exit;
      end;

      xToken.Claims.SetClaimOfType<String>('login', xUser);

      xCompactToken := TJOSE.SHA256CompactToken('KeyDevsBets', xToken);

      Res.Send(xCompactToken);
    end;
    xToken.Free;
  finally

  end;
end;

end.
