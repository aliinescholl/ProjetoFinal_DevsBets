unit UDAO.Base;

interface

uses
  UDAO.Intf,
  System.JSON,
  Dataset.Serialize;

type
  TDAOBase = class(TInterfacedObject, IDAO)
  protected
    FTabela: String;
  public
    function ObterRegistros : TJSONArray;
    function ProcurarPorId(aIdentificador: Integer): TJSONObject;
    function AdicionarRegistro(aRegistro: TJSONObject): Boolean;
    function DeletarRegistro(aIdentificador: Integer): Boolean;


  end;

implementation

uses
  FIREDAC.Comp.Client,
  System.SysUtils,
  UUtil.Banco;

{ TDAOUsers }

function TDAOBase.AdicionarRegistro(aRegistro: TJSONObject): Boolean;
  begin
  try
    result := TUtilBanco.AdicionarRegistro(FTabela, aRegistro.ToJSON)
  except on E: Exception do
    raise Exception.Create('Erro ao adicionar registro' + e.Message);
  end;
end;

function TDAOBase.DeletarRegistro(aIdentificador: Integer): Boolean;
begin
  try
    result := TUtilBanco.RemoverRegistro(FTabela, aIdentificador);
  except on E: Exception do
    raise Exception.Create('Erro ao remover registro' + e.Message);
  end;
end;

function TDAOBase.ObterRegistros: TJSONArray;
begin
 try
   result := TUtilBanco.ExecutarConsulta(Format('SELECT * FROM %s', [FTabela]))
 except on E: Exception do
   raise Exception.Create('Erro ao obter os registros' + e.Message);
 end;
end;

function TDAOBase.ProcurarPorId(aIdentificador: Integer): TJSONObject;
var
  xJSONArray : TJSONArray;
begin
  try
    xJSONArray := TUtilBanco.ExecutarConsulta(
                    Format('SELECT * FROM %s WHERE ID = %d',
                      [FTabela, aIdentificador]));

    if xJsonArray.Count = 0 then
    begin
      result := TJSONObject.Create;
      xJSONArray.Free;
      Exit;
    end;

    result := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(
    xJSONArray[0].ToJson), 0) as TJSONObject;

  except on E: Exception do
    raise Exception.Create('Erro ao obter registros ' + e.Message);
  end;
end;

end.
