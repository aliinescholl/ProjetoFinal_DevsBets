unit UDAO.Users;

interface

uses
  UDAO.Intf,
  System.JSON,
  Dataset.Serialize;

type
  TDAOUsers = class(TInterfacedObject, IDAO)
    function ObterRegistros : TJSONArray;
    function ProcurarPorId(aIdentificador: Integer): TJSONObject;
    function AdicionarRegistro(aRegistro: TJSONObject): Boolean;
    function DeletarRegistro(aIdentificador: Integer): Boolean;

    function ValidarLogin(aUser, aPassword: String): Boolean;
  end;

implementation

uses
  FIREDAC.Comp.Client,
  System.SysUtils,
  UUtil.Banco;

const
  TABELA = 'users';

{ TDAOUsers }

function TDAOUsers.AdicionarRegistro(aRegistro: TJSONObject): Boolean;
  begin
  try
    result := TUtilBanco.AdicionarRegistro(TABELA, aRegistro.ToJSON)
  except on E: Exception do
    raise Exception.Create('Erro ao adicionar registro' + e.Message);
  end;
end;

function TDAOUsers.DeletarRegistro(aIdentificador: Integer): Boolean;
begin
  try
    result := TUtilBanco.RemoverRegistro(TABELA, aIdentificador);
  except on E: Exception do
    raise Exception.Create('Erro ao remover registro' + e.Message);
  end;
end;

function TDAOUsers.ObterRegistros: TJSONArray;
begin
 try
   result := TUtilBanco.ExecutarConsulta(Format('SELECT * FROM %s', [TABELA]))
 except on E: Exception do
   raise Exception.Create('Erro ao obter os registros' + e.Message);
 end;
end;

function TDAOUsers.ProcurarPorId(aIdentificador: Integer): TJSONObject;
var
  xJSONArray : TJSONArray;
begin
  try
    xJSONArray := TUtilBanco.ExecutarConsulta(
                    Format('SELECT * FROM %s WHERE ID = %d',
                      [TABELA, aIdentificador]);

    if xJsonArray.Count = 0 then
    begin
      result := TJSONObject.Create;
      xJSONArray.Free;
      Exit;
    end;

    result := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(
    xJSONArray[0].ToJson), 0) as TJSONObject;
  except on E: Exception do
    raise Exception.Create('Erro na consulta' + e.Message);
  end;
end;

function TDAOUsers.ValidarLogin(aUser, aPassword: String): Boolean;
begin

end;

end.
